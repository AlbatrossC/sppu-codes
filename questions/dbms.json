{
  "default": {
    "subject_code": "DBMS",
    "subject_name": "Database Management System",
    "description": "Explore Database Management System lab assignments with SQL queries, MongoDB operations, PL/SQL programming, data import/export, and database connectivity using front-end tools.",
    "keywords": ["SQL", "DDL", "DML", "Joins", "Sub-queries", "Views", "MongoDB", "CRUD", "PL/SQL", "Cursors", "Exception Handling", "Import", "Export", "Map-Reduce", "Database Connectivity"],
    "url": "https://sppucodes.vercel.app/dbms",
    "question_paper_url": "https://sppucodes.vercel.app/questionpapers/database-management-system"
  },
  "questions": [
    {
      "group": "A",
      "question_no": "1",
      "id": "sql-queries-demo",
      "question": "SQL Queries:\n\n• Design and Develop SQL DDL statements which demonstrate the use of SQL objects such as Table, View, Index, Sequence, Synonym, different constraints etc.\n\n• Write at least 10 SQL queries on the suitable database application using SQL DML statements.\n\nNote: Instructor will design the queries which demonstrate the use of concepts like Insert, Select, Update, Delete with operators, functions, and set operator etc.",
      "subject_code": "dbms",
      "file_name": ["1_a_sql_queries.sql", "1_b_sql_queries.sql"],
      "title": "SQL DDL and DML Queries"
    },
    {
      "group": "A",
      "question_no": "2",
      "id": "sql-joins-subqueries-views",
      "question": "SQL Queries – all types of Join, Sub-Query and View:\n\nWrite at least 10 SQL queries for suitable database application using SQL DML statements.\n\nNote: Instructor will design the queries which demonstrate the use of concepts like all types of Join, Sub-Query and View.",
      "subject_code": "dbms",
      "file_name": ["2_sql_joins_subqueries_views.sql"],
      "title": "SQL Joins, Subqueries and Views"
    },
    {
      "group": "A",
      "question_no": "3",
      "id": "mongodb-crud",
      "question": "MongoDB Queries:\n\nDesign and Develop MongoDB Queries using CRUD operations. (Use CRUD operations, SAVE method, logical operators etc.)",
      "subject_code": "dbms",
      "file_name": ["3_mongodb_crud.js"],
      "title": "MongoDB CRUD Operations"
    },
    {
      "group": "A",
      "question_no": "4",
      "id": "plsql-unnamed-block",
      "question": "Unnamed PL/SQL code block: Use of Control structure and Exception handling is mandatory.\n\nSuggested Problem statement:\n\nConsider Tables:\n  1. Borrower (Roll_no, Name, Date_of_Issue, Name_of_Book, Status)\n  2. Fine (Roll_no, Date, Amt)\n\n• Accept Roll_no and Name_of_Book from user.\n• Check the number of days (from Date_of_Issue).\n• If days are between 15 to 30 then fine amount will be Rs 5 per day.\n• If no. of days > 30, per day fine will be Rs 50 per day and for days less than 30, Rs. 5 per day.\n• After submitting the book, status will change from I to R.\n• If condition of fine is true, then details will be stored into fine table.\n• Also handles the exception by named exception handler or user define exception handler.\n\nOR\n\nMongoDB – Aggregation and Indexing:\n• Design and Develop MongoDB Queries using aggregation and indexing with suitable example using MongoDB.\n\nMongoDB – Map-reduce operations:\n• Implement Map-reduce operation with suitable example using MongoDB.",
      "subject_code": "dbms",
      "file_name": ["4_plsql_unnamed_block.sql", "4_mongodb_aggregation_mapreduce.js"],
      "title": "PL/SQL Control Structure and MongoDB Aggregation"
    },
    {
      "group": "A",
      "question_no": "5",
      "id": "data-import-export",
      "question": "Exporting and Importing Data:\n\n• Design and develop SQL DML statements to demonstrate exporting tables to external files of different file formats such as CSV, XLSX, TXT, etc.\n\n• Design and develop SQL DML statements to demonstrate importing data from external files of different file formats such as CSV, XLSX, TXT, etc.",
      "subject_code": "dbms",
      "file_name": ["5_data_export_import.sql"],
      "title": "Data Export and Import in SQL"
    },
    {
      "group": "A",
      "question_no": "6",
      "id": "plsql-cursors",
      "question": "Cursors (All types: Implicit, Explicit, Cursor FOR Loop, Parameterized Cursor):\n\nWrite a PL/SQL block of code using parameterized Cursor that will merge the data available in the newly created table N_Roll_Call with the data available in the table O_Roll_Call. If the data in the first table already exists in the second table then that data should be skipped.\n\nNote: Instructor will frame the problem statement for writing PL/SQL block using all types of Cursors in line with above statement.",
      "subject_code": "dbms",
      "file_name": ["6_plsql_cursors.sql"],
      "title": "PL/SQL Cursor Operations"
    },
    {
      "group": "A",
      "question_no": "7",
      "id": "database-connectivity",
      "question": "Database Connectivity:\n\nWrite a program to implement MySQL/Oracle database connectivity with any front-end language to implement Database navigation operations (add, delete, edit etc.)",
      "subject_code": "dbms",
      "file_name": ["7_database_connectivity.py", "7_database_connectivity.java"],
      "title": "Database Connectivity with Front-End"
    }
  ]
}
